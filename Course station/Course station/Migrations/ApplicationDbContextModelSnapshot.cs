// <auto-generated />
using System;
using Course_station.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Course_station.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Course_station.Models.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AchievementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementId"));

                    b.Property<int?>("BadgeId")
                        .HasColumnType("int")
                        .HasColumnName("BadgeID");

                    b.Property<DateOnly>("DateEarned")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AchievementId")
                        .HasName("PK__Achievem__276330E068F35568");

                    b.HasIndex("BadgeId");

                    b.HasIndex("LearnerId");

                    b.ToTable("Achievement");
                });

            modelBuilder.Entity("Course_station.Models.Assessment", b =>
                {
                    b.Property<int>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Assessment_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<string>("Criteria")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("criteria");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    b.Property<int?>("PassingMarks")
                        .HasColumnType("int")
                        .HasColumnName("passingMarks");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<int?>("TotalMarks")
                        .HasColumnType("int")
                        .HasColumnName("totalMarks");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<int?>("Weightage")
                        .HasColumnType("int")
                        .HasColumnName("weightage");

                    b.HasKey("AssessmentId")
                        .HasName("PK__Assessme__6B3C1D927D3DADAF");

                    b.HasIndex("ModuleId", "CourseId");

                    b.ToTable("Assessment");
                });

            modelBuilder.Entity("Course_station.Models.Badge", b =>
                {
                    b.Property<int>("BadgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BadgeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BadgeId"));

                    b.Property<string>("Criteria")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("criteria");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<int?>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.HasKey("BadgeId")
                        .HasName("PK__Badge__1918237C4A82E7F9");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("Course_station.Models.Collaborative", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("QuestID");

                    b.Property<DateOnly?>("Deadline")
                        .HasColumnType("date");

                    b.Property<int?>("MaxNumParticipants")
                        .HasColumnType("int")
                        .HasColumnName("Max_Num_Participants");

                    b.HasKey("QuestId")
                        .HasName("PK__Collabor__B6619ACBCA827253");

                    b.ToTable("Collaborative");
                });

            modelBuilder.Entity("Course_station.Models.ContentLibrary", b =>
                {
                    b.Property<int>("LibId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Lib_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibId"));

                    b.Property<string>("ContentUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contentURL");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("MetaData")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("metaData");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("LibId")
                        .HasName("PK__ContentL__4151D01392B24AE4");

                    b.HasIndex("ModuleId", "CourseId");

                    b.ToTable("ContentLibrary");
                });

            modelBuilder.Entity("Course_station.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int?>("CreditPoint")
                        .HasColumnType("int")
                        .HasColumnName("credit_point");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("DiffLevel")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("diff_level");

                    b.Property<string>("LearningObjective")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("learning_objective");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("CourseId")
                        .HasName("PK__Course__37E005FB479EE564");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Course_station.Models.CourseEnrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Enrollment_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<DateOnly?>("CompletionDate")
                        .HasColumnType("date")
                        .HasColumnName("completion_date");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<DateOnly?>("EnrollmentDate")
                        .HasColumnType("date")
                        .HasColumnName("enrollment_date");

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("EnrollmentId")
                        .HasName("PK__Course_E__4365BD6AD0C13685");

                    b.HasIndex("CourseId");

                    b.HasIndex("LearnerId");

                    b.ToTable("Course_Enrollment");
                });

            modelBuilder.Entity("Course_station.Models.CoursePrerequisite", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<string>("Prerequisite")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("prerequisite");

                    b.HasKey("CourseId", "Prerequisite")
                        .HasName("PK__CoursePr__A33A4ED1E66E9C8B");

                    b.ToTable("CoursePrerequisites");
                });

            modelBuilder.Entity("Course_station.Models.DiscussionForum", b =>
                {
                    b.Property<int>("ForumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("forumID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForumId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastActive")
                        .HasColumnType("datetime")
                        .HasColumnName("last_active");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.HasKey("ForumId")
                        .HasName("PK__Discussi__BBA7A440B88B57A0");

                    b.HasIndex("ModuleId", "CourseId");

                    b.ToTable("Discussion_forum");
                });

            modelBuilder.Entity("Course_station.Models.EmotionalFeedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int")
                        .HasColumnName("Activity_ID");

                    b.Property<string>("EmotionalState")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("emotional_state");

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Emotiona__6A4BEDF6E702E79A");

                    b.HasIndex("ActivityId");

                    b.HasIndex("LearnerId");

                    b.ToTable("Emotional_feedback");
                });

            modelBuilder.Entity("Course_station.Models.EmotionalfeedbackReview", b =>
                {
                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("InstructorID");

                    b.Property<string>("Review")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("review");

                    b.HasKey("FeedbackId", "InstructorId")
                        .HasName("PK__Emotiona__C39BFD4177CAF147");

                    b.HasIndex("InstructorId");

                    b.ToTable("Emotionalfeedback_review");
                });

            modelBuilder.Entity("Course_station.Models.FilledSurvey", b =>
                {
                    b.Property<int>("SurveyId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyID");

                    b.Property<string>("Question")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SurveyId", "Question", "LearnerId")
                        .HasName("PK__FilledSu__D89C33C70EECE04F");

                    b.HasIndex("LearnerId");

                    b.ToTable("FilledSurvey");
                });

            modelBuilder.Entity("Course_station.Models.HealthCondition", b =>
                {
                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("profileID");

                    b.Property<string>("Condition")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("condition");

                    b.HasKey("LearnerId", "ProfileId", "Condition")
                        .HasName("PK__HealthCo__1C0E75045BF6A8A7");

                    b.ToTable("HealthCondition");
                });

            modelBuilder.Entity("Course_station.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Instructor_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("ExpertiseArea")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("expertise_area");

                    b.Property<string>("InstructorName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Instructor_name");

                    b.Property<string>("LatestQualification")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("latest_qualification");

                    b.HasKey("InstructorId")
                        .HasName("PK__Instruct__DD4B9A8ADBF15F10");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("Course_station.Models.InstructorCount", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<int?>("InstructorCount1")
                        .HasColumnType("int")
                        .HasColumnName("InstructorCount");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.ToTable((string)null);

                    b.ToView("InstructorCount", (string)null);
                });

            modelBuilder.Entity("Course_station.Models.InteractionLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("ActionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("action_type");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int")
                        .HasColumnName("activity_ID");

                    b.Property<TimeOnly?>("Duration")
                        .HasColumnType("time");

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime");

                    b.HasKey("LogId")
                        .HasName("PK__Interact__5E5499A8832998FA");

                    b.HasIndex("ActivityId");

                    b.HasIndex("LearnerId");

                    b.ToTable("Interaction_log");
                });

            modelBuilder.Entity("Course_station.Models.Leaderboard", b =>
                {
                    b.Property<int>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BoardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoardId"));

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("season");

                    b.HasKey("BoardId")
                        .HasName("PK__Leaderbo__F9646BD254AD5C0D");

                    b.ToTable("Leaderboard");
                });

            modelBuilder.Entity("Course_station.Models.Learner", b =>
                {
                    b.Property<int>("LearnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearnerId"));

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("Country")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("country");

                    b.Property<string>("CulturalBackground")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cultural_background");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.HasKey("LearnerId")
                        .HasName("PK__Learner__3DE277FF157AE6B6");

                    b.ToTable("Learner");
                });

            modelBuilder.Entity("Course_station.Models.LearnerCollaboration", b =>
                {
                    b.Property<int>("LearnerId")
                        .HasColumnType("int");

                    b.Property<int>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("QuestID");

                    b.Property<string>("CompletionStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("completion_status");

                    b.HasKey("LearnerId", "QuestId")
                        .HasName("PK__LearnerC__CCCDE57649138492");

                    b.HasIndex("QuestId");

                    b.ToTable("LearnerCollaboration");
                });

            modelBuilder.Entity("Course_station.Models.LearnerDiscussion", b =>
                {
                    b.Property<int>("ForumId")
                        .HasColumnType("int")
                        .HasColumnName("ForumID");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<string>("Post")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("post");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time")
                        .HasColumnName("time");

                    b.HasKey("ForumId", "LearnerId", "Post")
                        .HasName("PK__LearnerD__942BB6D147C550D4");

                    b.HasIndex("LearnerId");

                    b.ToTable("LearnerDiscussion");
                });

            modelBuilder.Entity("Course_station.Models.LearnerMastery", b =>
                {
                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<int>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("QuestID");

                    b.Property<string>("CompletionStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("completion_status");

                    b.HasKey("LearnerId", "QuestId")
                        .HasName("PK__LearnerM__CCCDE5562A4D1BC5");

                    b.HasIndex("QuestId");

                    b.ToTable("LearnerMastery");
                });

            modelBuilder.Entity("Course_station.Models.LearningActivity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Activity_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<string>("ActivityType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("activityType");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<string>("InstructionDetails")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("instruction_details");

                    b.Property<int?>("MaxScore")
                        .HasColumnType("int")
                        .HasColumnName("maxScore");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    b.HasKey("ActivityId")
                        .HasName("PK__learning__393F5BA5B56F0FBC");

                    b.HasIndex("ModuleId", "CourseId");

                    b.ToTable("learningActivity");
                });

            modelBuilder.Entity("Course_station.Models.LearningGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Deadline")
                        .HasColumnType("date")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__Learning__3214EC2756A1DAB0");

                    b.ToTable("Learning_goal");
                });

            modelBuilder.Entity("Course_station.Models.LearningPath", b =>
                {
                    b.Property<int>("PathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Path_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PathId"));

                    b.Property<string>("AdaptiveRules")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("adaptiveRules");

                    b.Property<string>("CompletionStatus")
                        .HasMaxLength(220)
                        .IsUnicode(false)
                        .HasColumnType("varchar(220)")
                        .HasColumnName("completion_status");

                    b.Property<string>("CustomContent")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("customContent");

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("profileID");

                    b.HasKey("PathId")
                        .HasName("PK__Learning__12D3DFFB53D3853F");

                    b.HasIndex("LearnerId", "ProfileId");

                    b.ToTable("LearningPath");
                });

            modelBuilder.Entity("Course_station.Models.LearningPrefrence", b =>
                {
                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<string>("Prefrences")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prefrences");

                    b.HasKey("LearnerId", "Prefrences")
                        .HasName("PK__Learning__7B1D3263133AC949");

                    b.ToTable("LearningPrefrences");
                });

            modelBuilder.Entity("Course_station.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<string>("ContentUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("contentURL");

                    b.Property<string>("DifficultyLevel")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("difficulty_level");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("ModuleId", "CourseId")
                        .HasName("PK__Module__BE9AE0776D951244");

                    b.HasIndex("CourseId");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Course_station.Models.ModuleContent", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<string>("ContetntType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("contetntType");

                    b.HasKey("ModuleId", "CourseId", "ContetntType")
                        .HasName("PK__ModuleCo__2A345EC699571233");

                    b.ToTable("ModuleContent");
                });

            modelBuilder.Entity("Course_station.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Notification_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("message");

                    b.Property<bool?>("Readstatus")
                        .HasColumnType("bit")
                        .HasColumnName("readstatus");

                    b.Property<DateTime?>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("time_stamp")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Urgency")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("urgency");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__8C1160B58591F297");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Course_station.Models.Pathreview", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("Instructor_ID");

                    b.Property<int>("PathId")
                        .HasColumnType("int")
                        .HasColumnName("Path_ID");

                    b.Property<string>("Feedback")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("feedback");

                    b.HasKey("InstructorId", "PathId")
                        .HasName("PK__pathrevi__7C66A775E13BC0EB");

                    b.HasIndex("PathId");

                    b.ToTable("pathreview");
                });

            modelBuilder.Entity("Course_station.Models.PersonalProfile", b =>
                {
                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("profileID");

                    b.Property<string>("EmotionalState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("emotionalState");

                    b.Property<string>("PersonalityType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("personality_type");

                    b.Property<string>("PreferedContentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PreferedContent_type");

                    b.HasKey("LearnerId", "ProfileId")
                        .HasName("PK__Personal__BA3661C6CC87238E");

                    b.ToTable("PersonalProfile");
                });

            modelBuilder.Entity("Course_station.Models.Quest", b =>
                {
                    b.Property<int>("QuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestId"));

                    b.Property<string>("Criteria")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("criteria");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<int?>("DifficultyLevel")
                        .HasColumnType("int")
                        .HasColumnName("difficulty_level");

                    b.Property<string>("Title")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("title");

                    b.HasKey("QuestId")
                        .HasName("PK__Quest__B6619ACB864E1E60");

                    b.ToTable("Quest");
                });

            modelBuilder.Entity("Course_station.Models.QuestReward", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("QuestID");

                    b.Property<int>("RewardId")
                        .HasColumnType("int")
                        .HasColumnName("RewardID");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<DateTime?>("TimeEarned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("timeEarned")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("QuestId", "RewardId", "LearnerId")
                        .HasName("PK__QuestRew__C523306E95866F17");

                    b.HasIndex("LearnerId");

                    b.HasIndex("RewardId");

                    b.ToTable("QuestReward");
                });

            modelBuilder.Entity("Course_station.Models.Ranking", b =>
                {
                    b.Property<int>("BoardId")
                        .HasColumnType("int")
                        .HasColumnName("BoardID");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("Rank")
                        .HasColumnType("int")
                        .HasColumnName("rank");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int")
                        .HasColumnName("total_points");

                    b.HasKey("BoardId", "LearnerId")
                        .HasName("PK__Ranking__4F1ED41D4273594D");

                    b.HasIndex("CourseId");

                    b.HasIndex("LearnerId");

                    b.ToTable("Ranking");
                });

            modelBuilder.Entity("Course_station.Models.Reward", b =>
                {
                    b.Property<int>("RewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RewardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardId"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<int?>("Value")
                        .HasColumnType("int")
                        .HasColumnName("value");

                    b.HasKey("RewardId")
                        .HasName("PK__Reward__82501599B39290AF");

                    b.ToTable("Reward");
                });

            modelBuilder.Entity("Course_station.Models.Skill", b =>
                {
                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<string>("Skill1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("skill");

                    b.HasKey("LearnerId", "Skill1")
                        .HasName("PK__Skills__9E1255A04DD855D7");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Course_station.Models.SkillMastery", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int")
                        .HasColumnName("QuestID");

                    b.Property<string>("Skill")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("QuestId", "Skill")
                        .HasName("PK__Skill_Ma__CF6E15970A8FE247");

                    b.HasIndex(new[] { "QuestId" }, "UQ__Skill_Ma__B6619ACA08228CBC")
                        .IsUnique();

                    b.ToTable("Skill_Mastery");
                });

            modelBuilder.Entity("Course_station.Models.SkillProgression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("int")
                        .HasColumnName("proficiency_level");

                    b.Property<string>("SkillName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("skill_name");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("PK__SkillPro__3214EC271097B570");

                    b.HasIndex("LearnerId", "SkillName");

                    b.ToTable("SkillProgression");
                });

            modelBuilder.Entity("Course_station.Models.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Survey__3214EC277BEB44F7");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("Course_station.Models.SurveyQuestion", b =>
                {
                    b.Property<int>("SurveyId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyID");

                    b.Property<string>("Question")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SurveyId", "Question")
                        .HasName("PK__SurveyQu__23FB983BDB0F3FCB");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("Course_station.Models.TakenAssessment", b =>
                {
                    b.Property<int>("AssessmentId")
                        .HasColumnType("int")
                        .HasColumnName("Assessment_ID");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<int?>("ScoredPoint")
                        .HasColumnType("int");

                    b.HasKey("AssessmentId", "LearnerId")
                        .HasName("PK__TakenAss__88E23AED23474167");

                    b.HasIndex("LearnerId");

                    b.ToTable("TakenAssessment");
                });

            modelBuilder.Entity("Course_station.Models.TargetTrait", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("Module_ID");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.Property<string>("Trait")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("trait");

                    b.HasKey("ModuleId", "CourseId", "Trait")
                        .HasName("PK__TargetTr__8730B76F61B1C4E6");

                    b.ToTable("TargetTraits");
                });

            modelBuilder.Entity("LearnersGoal", b =>
                {
                    b.Property<int>("GoalId")
                        .HasColumnType("int")
                        .HasColumnName("GoalID");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("LearnerID");

                    b.HasKey("GoalId", "LearnerId")
                        .HasName("PK__Learners__3C3540FE247F3690");

                    b.HasIndex("LearnerId");

                    b.ToTable("LearnersGoals", (string)null);
                });

            modelBuilder.Entity("RecivedNotfy", b =>
                {
                    b.Property<int>("LearnerId")
                        .HasColumnType("int")
                        .HasColumnName("Learner_ID");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("Notification_ID");

                    b.HasKey("LearnerId", "NotificationId")
                        .HasName("PK__RecivedN__752361F4E8319A6D");

                    b.HasIndex("NotificationId");

                    b.ToTable("RecivedNotfy", (string)null);
                });

            modelBuilder.Entity("Teach", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int")
                        .HasColumnName("Instructor_ID");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    b.HasKey("InstructorId", "CourseId")
                        .HasName("PK__Teaches__7E359AD5C2111E9F");

                    b.HasIndex("CourseId");

                    b.ToTable("Teaches", (string)null);
                });

            modelBuilder.Entity("Course_station.Models.Achievement", b =>
                {
                    b.HasOne("Course_station.Models.Badge", "Badge")
                        .WithMany("Achievements")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Achieveme__Badge__30C33EC3");

                    b.HasOne("Course_station.Models.Learner", "Learner")
                        .WithMany("Achievements")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Achieveme__Learn__2FCF1A8A");

                    b.Navigation("Badge");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("Course_station.Models.Assessment", b =>
                {
                    b.HasOne("Course_station.Models.Module", "Module")
                        .WithMany("Assessments")
                        .HasForeignKey("ModuleId", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Assessment__5AEE82B9");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Course_station.Models.Collaborative", b =>
                {
                    b.HasOne("Course_station.Models.Quest", "Quest")
                        .WithOne("Collaborative")
                        .HasForeignKey("Course_station.Models.Collaborative", "QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Collabora__Quest__123EB7A3");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Course_station.Models.ContentLibrary", b =>
                {
                    b.HasOne("Course_station.Models.Module", "Module")
                        .WithMany("ContentLibraries")
                        .HasForeignKey("ModuleId", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__ContentLibrary__534D60F1");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Course_station.Models.CourseEnrollment", b =>
                {
                    b.HasOne("Course_station.Models.Course", "Course")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Course_En__Cours__571DF1D5");

                    b.HasOne("Course_station.Models.Learner", "Learner")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Course_En__Learn__5629CD9C");

                    b.Navigation("Course");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("Course_station.Models.CoursePrerequisite", b =>
                {
                    b.HasOne("Course_station.Models.Course", "Course")
                        .WithMany("CoursePrerequisites")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CoursePre__Cours__47DBAE45");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Course_station.Models.DiscussionForum", b =>
                {
                    b.HasOne("Course_station.Models.Module", "Module")
                        .WithMany("DiscussionForums")
                        .HasForeignKey("ModuleId", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Discussion_forum__208CD6FA");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Course_station.Models.EmotionalFeedback", b =>
                {
                    b.HasOne("Course_station.Models.LearningActivity", "Activity")
                        .WithMany("EmotionalFeedbacks")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Emotional__Activ__6EF57B66");

                    b.HasOne("Course_station.Models.Learner", "Learner")
                        .WithMany("EmotionalFeedbacks")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Emotional__emoti__6E01572D");

                    b.Navigation("Activity");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("Course_station.Models.EmotionalfeedbackReview", b =>
                {
                    b.HasOne("Course_station.Models.EmotionalFeedback", "Feedback")
                        .WithMany("EmotionalfeedbackReviews")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Emotional__Feedb__71D1E811");

                    b.HasOne("Course_station.Models.Instructor", "Instructor")
                        .WithMany("EmotionalfeedbackReviews")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Emotional__Instr__72C60C4A");

                    b.Navigation("Feedback");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Course_station.Models.FilledSurvey", b =>
                {
                    b.HasOne("Course_station.Models.Learner", "Learner")
                        .WithMany("FilledSurveys")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__FilledSur__Learn__2CF2ADDF");

                    b.HasOne("Course_station.Models.SurveyQuestion", "SurveyQuestion")
                        .WithMany("FilledSurveys")
                        .HasForeignKey("SurveyId", "Question")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__FilledSurvey__2BFE89A6");

                    b.Navigation("Learner");

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("Course_station.Models.HealthCondition", b =>
                {
                    b.HasOne("Course_station.Models.PersonalProfile", "PersonalProfile")
                        .WithMany("HealthConditions")
                        .HasForeignKey("LearnerId", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__HealthCondition__4316F928");

                    b.Navigation("PersonalProfile");
                });

            modelBuilder.Entity("Course_station.Models.InteractionLog", b =>
                {
                    b.HasOne("Course_station.Models.LearningActivity", "Activity")
                        .WithMany("InteractionLogs")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Interacti__activ__02FC7413");

                    b.HasOne("Course_station.Models.Learner", "Learner")
                        .WithMany("InteractionLogs")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Interacti__Learn__03F0984C");

                    b.Navigation("Activity");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("Course_station.Models.LearnerCollaboration", b =>
                {
                    b.HasOne("Course_station.Models.Learner", "Learner")
                        .WithMany("LearnerCollaborations")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnerCo__Learn__151B244E");

                    b.HasOne("Course_station.Models.Collaborative", "Quest")
                        .WithMany("LearnerCollaborations")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnerCo__Quest__160F4887");

                    b.Navigation("Learner");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Course_station.Models.LearnerDiscussion", b =>
                {
                    b.HasOne("Course_station.Models.DiscussionForum", "Forum")
                        .WithMany("LearnerDiscussions")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnerDi__Forum__282DF8C2");

                    b.HasOne("Course_station.Models.Learner", "Learner")
                        .WithMany("LearnerDiscussions")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnerDi__Learn__29221CFB");

                    b.Navigation("Forum");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("Course_station.Models.LearnerMastery", b =>
                {
                    b.HasOne("Course_station.Models.Learner", "Learner")
                        .WithMany("LearnerMasteries")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnerMa__Learn__19DFD96B");

                    b.HasOne("Course_station.Models.SkillMastery", "Quest")
                        .WithMany("LearnerMasteries")
                        .HasForeignKey("QuestId")
                        .HasPrincipalKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnerMa__Quest__1AD3FDA4");

                    b.Navigation("Learner");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Course_station.Models.LearningActivity", b =>
                {
                    b.HasOne("Course_station.Models.Module", "Module")
                        .WithMany("LearningActivities")
                        .HasForeignKey("ModuleId", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__learningActivity__6A30C649");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Course_station.Models.LearningPath", b =>
                {
                    b.HasOne("Course_station.Models.PersonalProfile", "PersonalProfile")
                        .WithMany("LearningPaths")
                        .HasForeignKey("LearnerId", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__LearningPath__6383C8BA");

                    b.Navigation("PersonalProfile");
                });

            modelBuilder.Entity("Course_station.Models.LearningPrefrence", b =>
                {
                    b.HasOne("Course_station.Models.Learner", "Learner")
                        .WithMany("LearningPrefrences")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearningP__Learn__3D5E1FD2");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("Course_station.Models.Module", b =>
                {
                    b.HasOne("Course_station.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Module__Course_I__4AB81AF0");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Course_station.Models.ModuleContent", b =>
                {
                    b.HasOne("Course_station.Models.Module", "Module")
                        .WithMany("ModuleContents")
                        .HasForeignKey("ModuleId", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ModuleContent__5070F446");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Course_station.Models.Pathreview", b =>
                {
                    b.HasOne("Course_station.Models.Instructor", "Instructor")
                        .WithMany("Pathreviews")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__pathrevie__Instr__66603565");

                    b.HasOne("Course_station.Models.LearningPath", "Path")
                        .WithMany("Pathreviews")
                        .HasForeignKey("PathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__pathrevie__Path___6754599E");

                    b.Navigation("Instructor");

                    b.Navigation("Path");
                });

            modelBuilder.Entity("Course_station.Models.PersonalProfile", b =>
                {
                    b.HasOne("Course_station.Models.Learner", "Learner")
                        .WithMany("PersonalProfiles")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__PersonalP__Learn__403A8C7D");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("Course_station.Models.QuestReward", b =>
                {
                    b.HasOne("Course_station.Models.Learner", "Learner")
                        .WithMany("QuestRewards")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__QuestRewa__Learn__0B91BA14");

                    b.HasOne("Course_station.Models.Quest", "Quest")
                        .WithMany("QuestRewards")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__QuestRewa__Quest__09A971A2");

                    b.HasOne("Course_station.Models.Reward", "Reward")
                        .WithMany("QuestRewards")
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__QuestRewa__Rewar__0A9D95DB");

                    b.Navigation("Learner");

                    b.Navigation("Quest");

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("Course_station.Models.Ranking", b =>
                {
                    b.HasOne("Course_station.Models.Leaderboard", "Board")
                        .WithMany("Rankings")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Ranking__BoardID__3864608B");

                    b.HasOne("Course_station.Models.Course", "Course")
                        .WithMany("Rankings")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Ranking__CourseI__3A4CA8FD");

                    b.HasOne("Course_station.Models.Learner", "Learner")
                        .WithMany("Rankings")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Ranking__Learner__395884C4");

                    b.Navigation("Board");

                    b.Navigation("Course");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("Course_station.Models.Skill", b =>
                {
                    b.HasOne("Course_station.Models.Learner", "Learner")
                        .WithMany("Skills")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Skills__Learner___3A81B327");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("Course_station.Models.SkillMastery", b =>
                {
                    b.HasOne("Course_station.Models.Quest", "Quest")
                        .WithOne("SkillMastery")
                        .HasForeignKey("Course_station.Models.SkillMastery", "QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Skill_Mas__Quest__0F624AF8");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Course_station.Models.SkillProgression", b =>
                {
                    b.HasOne("Course_station.Models.Skill", "Skill")
                        .WithMany("SkillProgressions")
                        .HasForeignKey("LearnerId", "SkillName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__SkillProgression__339FAB6E");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Course_station.Models.SurveyQuestion", b =>
                {
                    b.HasOne("Course_station.Models.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__SurveyQue__Surve__25518C17");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Course_station.Models.TakenAssessment", b =>
                {
                    b.HasOne("Course_station.Models.Assessment", "Assessment")
                        .WithMany("TakenAssessments")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TakenAsse__Asses__5DCAEF64");

                    b.HasOne("Course_station.Models.Learner", "Learner")
                        .WithMany("TakenAssessments")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TakenAsse__Learn__5EBF139D");

                    b.Navigation("Assessment");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("Course_station.Models.TargetTrait", b =>
                {
                    b.HasOne("Course_station.Models.Module", "Module")
                        .WithMany("TargetTraits")
                        .HasForeignKey("ModuleId", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TargetTraits__4D94879B");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("LearnersGoal", b =>
                {
                    b.HasOne("Course_station.Models.LearningGoal", null)
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnersG__GoalI__3F115E1A");

                    b.HasOne("Course_station.Models.Learner", null)
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnersG__Learn__40058253");
                });

            modelBuilder.Entity("RecivedNotfy", b =>
                {
                    b.HasOne("Course_station.Models.Learner", null)
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RecivedNo__Learn__7D439ABD");

                    b.HasOne("Course_station.Models.Notification", null)
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RecivedNo__Notif__7E37BEF6");
                });

            modelBuilder.Entity("Teach", b =>
                {
                    b.HasOne("Course_station.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Teaches__Course___76969D2E");

                    b.HasOne("Course_station.Models.Instructor", null)
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Teaches__Instruc__75A278F5");
                });

            modelBuilder.Entity("Course_station.Models.Assessment", b =>
                {
                    b.Navigation("TakenAssessments");
                });

            modelBuilder.Entity("Course_station.Models.Badge", b =>
                {
                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("Course_station.Models.Collaborative", b =>
                {
                    b.Navigation("LearnerCollaborations");
                });

            modelBuilder.Entity("Course_station.Models.Course", b =>
                {
                    b.Navigation("CourseEnrollments");

                    b.Navigation("CoursePrerequisites");

                    b.Navigation("Modules");

                    b.Navigation("Rankings");
                });

            modelBuilder.Entity("Course_station.Models.DiscussionForum", b =>
                {
                    b.Navigation("LearnerDiscussions");
                });

            modelBuilder.Entity("Course_station.Models.EmotionalFeedback", b =>
                {
                    b.Navigation("EmotionalfeedbackReviews");
                });

            modelBuilder.Entity("Course_station.Models.Instructor", b =>
                {
                    b.Navigation("EmotionalfeedbackReviews");

                    b.Navigation("Pathreviews");
                });

            modelBuilder.Entity("Course_station.Models.Leaderboard", b =>
                {
                    b.Navigation("Rankings");
                });

            modelBuilder.Entity("Course_station.Models.Learner", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("CourseEnrollments");

                    b.Navigation("EmotionalFeedbacks");

                    b.Navigation("FilledSurveys");

                    b.Navigation("InteractionLogs");

                    b.Navigation("LearnerCollaborations");

                    b.Navigation("LearnerDiscussions");

                    b.Navigation("LearnerMasteries");

                    b.Navigation("LearningPrefrences");

                    b.Navigation("PersonalProfiles");

                    b.Navigation("QuestRewards");

                    b.Navigation("Rankings");

                    b.Navigation("Skills");

                    b.Navigation("TakenAssessments");
                });

            modelBuilder.Entity("Course_station.Models.LearningActivity", b =>
                {
                    b.Navigation("EmotionalFeedbacks");

                    b.Navigation("InteractionLogs");
                });

            modelBuilder.Entity("Course_station.Models.LearningPath", b =>
                {
                    b.Navigation("Pathreviews");
                });

            modelBuilder.Entity("Course_station.Models.Module", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("ContentLibraries");

                    b.Navigation("DiscussionForums");

                    b.Navigation("LearningActivities");

                    b.Navigation("ModuleContents");

                    b.Navigation("TargetTraits");
                });

            modelBuilder.Entity("Course_station.Models.PersonalProfile", b =>
                {
                    b.Navigation("HealthConditions");

                    b.Navigation("LearningPaths");
                });

            modelBuilder.Entity("Course_station.Models.Quest", b =>
                {
                    b.Navigation("Collaborative");

                    b.Navigation("QuestRewards");

                    b.Navigation("SkillMastery");
                });

            modelBuilder.Entity("Course_station.Models.Reward", b =>
                {
                    b.Navigation("QuestRewards");
                });

            modelBuilder.Entity("Course_station.Models.Skill", b =>
                {
                    b.Navigation("SkillProgressions");
                });

            modelBuilder.Entity("Course_station.Models.SkillMastery", b =>
                {
                    b.Navigation("LearnerMasteries");
                });

            modelBuilder.Entity("Course_station.Models.Survey", b =>
                {
                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("Course_station.Models.SurveyQuestion", b =>
                {
                    b.Navigation("FilledSurveys");
                });
#pragma warning restore 612, 618
        }
    }
}
